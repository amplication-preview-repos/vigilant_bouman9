/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChapterService } from "../chapter.service";
import { ChapterCreateInput } from "./ChapterCreateInput";
import { Chapter } from "./Chapter";
import { ChapterFindManyArgs } from "./ChapterFindManyArgs";
import { ChapterWhereUniqueInput } from "./ChapterWhereUniqueInput";
import { ChapterUpdateInput } from "./ChapterUpdateInput";
import { PageFindManyArgs } from "../../page/base/PageFindManyArgs";
import { Page } from "../../page/base/Page";
import { PageWhereUniqueInput } from "../../page/base/PageWhereUniqueInput";

export class ChapterControllerBase {
  constructor(protected readonly service: ChapterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Chapter })
  async createChapter(
    @common.Body() data: ChapterCreateInput
  ): Promise<Chapter> {
    return await this.service.createChapter({
      data: data,
      select: {
        chapterNumber: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Chapter] })
  @ApiNestedQuery(ChapterFindManyArgs)
  async chapters(@common.Req() request: Request): Promise<Chapter[]> {
    const args = plainToClass(ChapterFindManyArgs, request.query);
    return this.service.chapters({
      ...args,
      select: {
        chapterNumber: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Chapter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chapter(
    @common.Param() params: ChapterWhereUniqueInput
  ): Promise<Chapter | null> {
    const result = await this.service.chapter({
      where: params,
      select: {
        chapterNumber: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Chapter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChapter(
    @common.Param() params: ChapterWhereUniqueInput,
    @common.Body() data: ChapterUpdateInput
  ): Promise<Chapter | null> {
    try {
      return await this.service.updateChapter({
        where: params,
        data: data,
        select: {
          chapterNumber: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Chapter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChapter(
    @common.Param() params: ChapterWhereUniqueInput
  ): Promise<Chapter | null> {
    try {
      return await this.service.deleteChapter({
        where: params,
        select: {
          chapterNumber: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pages")
  @ApiNestedQuery(PageFindManyArgs)
  async findPages(
    @common.Req() request: Request,
    @common.Param() params: ChapterWhereUniqueInput
  ): Promise<Page[]> {
    const query = plainToClass(PageFindManyArgs, request.query);
    const results = await this.service.findPages(params.id, {
      ...query,
      select: {
        chapter: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        imageUrl: true,
        pageNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pages")
  async connectPages(
    @common.Param() params: ChapterWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        connect: body,
      },
    };
    await this.service.updateChapter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pages")
  async updatePages(
    @common.Param() params: ChapterWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        set: body,
      },
    };
    await this.service.updateChapter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pages")
  async disconnectPages(
    @common.Param() params: ChapterWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        disconnect: body,
      },
    };
    await this.service.updateChapter({
      where: params,
      data,
      select: { id: true },
    });
  }
}
