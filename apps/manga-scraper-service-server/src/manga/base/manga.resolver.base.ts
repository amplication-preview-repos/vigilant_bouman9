/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Manga } from "./Manga";
import { MangaCountArgs } from "./MangaCountArgs";
import { MangaFindManyArgs } from "./MangaFindManyArgs";
import { MangaFindUniqueArgs } from "./MangaFindUniqueArgs";
import { CreateMangaArgs } from "./CreateMangaArgs";
import { UpdateMangaArgs } from "./UpdateMangaArgs";
import { DeleteMangaArgs } from "./DeleteMangaArgs";
import { MangaService } from "../manga.service";
@graphql.Resolver(() => Manga)
export class MangaResolverBase {
  constructor(protected readonly service: MangaService) {}

  async _mangaItemsMeta(
    @graphql.Args() args: MangaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Manga])
  async mangaItems(@graphql.Args() args: MangaFindManyArgs): Promise<Manga[]> {
    return this.service.mangaItems(args);
  }

  @graphql.Query(() => Manga, { nullable: true })
  async manga(
    @graphql.Args() args: MangaFindUniqueArgs
  ): Promise<Manga | null> {
    const result = await this.service.manga(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Manga)
  async createManga(@graphql.Args() args: CreateMangaArgs): Promise<Manga> {
    return await this.service.createManga({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Manga)
  async updateManga(
    @graphql.Args() args: UpdateMangaArgs
  ): Promise<Manga | null> {
    try {
      return await this.service.updateManga({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Manga)
  async deleteManga(
    @graphql.Args() args: DeleteMangaArgs
  ): Promise<Manga | null> {
    try {
      return await this.service.deleteManga(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
